{"version":3,"sources":["logo.svg","Components/favoriteTGs.js","Components/FavoriteTGStatus.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","favoriteTGs","name","category","ID","FavoriteTGStatus","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","baseurl","jsonquery","fullUrl","buildTalkgroupRule","bind","assertThisInitialized","tgId","id","field","type","input","operator","value","_this2","temp","forEach","item","push","condition","rules","console","log","JSON","stringify","setState","react_default","a","createElement","Fragment","style","listStyleType","map","href","target","color","React","Component","App","className","FavoriteTGStatus_FavoriteTGStatus","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gMCiCzBC,EAjCK,CAChB,CAACC,KAAO,aAAaC,SAAW,gBAAgBC,GAAK,IACrD,CAACF,KAAO,gBAAgBC,SAAW,gBAAgBC,GAAK,IACxD,CAACF,KAAO,yBAAyBC,SAAW,gBAAgBC,GAAK,IACjE,CAACF,KAAO,iBAAiBC,SAAW,gBAAgBC,GAAK,KACzD,CAACF,KAAO,SAASC,SAAW,gBAAgBC,GAAK,KACjD,CAACF,KAAO,0BAA0BC,SAAW,WAAWC,GAAK,KAC7D,CAACF,KAAO,0BAA0BC,SAAW,WAAWC,GAAK,KAC7D,CAACF,KAAO,0BAA0BC,SAAW,WAAWC,GAAK,KAC7D,CAACF,KAAO,UAAUC,SAAW,UAAUC,GAAK,MAC5C,CAACF,KAAO,SAASC,SAAW,UAAUC,GAAK,MAC3C,CAACF,KAAO,WAAWC,SAAW,UAAUC,GAAK,MAC7C,CAACF,KAAO,YAAYC,SAAW,UAAUC,GAAK,MAC9C,CAACF,KAAO,YAAYC,SAAW,WAAWC,GAAK,MAC/C,CAACF,KAAO,iBAAiBC,SAAW,gBAAgBC,GAAK,MACzD,CAACF,KAAO,eAAeC,SAAW,UAAUC,GAAK,OACjD,CAACF,KAAO,iBAAiBC,SAAW,UAAUC,GAAK,OACnD,CAACF,KAAO,UAAUC,SAAW,UAAUC,GAAK,OAC5C,CAACF,KAAO,cAAcC,SAAW,UAAUC,GAAK,OAChD,CAACF,KAAO,MAAMC,SAAW,UAAUC,GAAK,OACxC,CAACF,KAAO,kBAAkBC,SAAW,UAAUC,GAAK,OACpD,CAACF,KAAO,aAAaC,SAAW,UAAUC,GAAK,OAC/C,CAACF,KAAO,SAASC,SAAW,SAASC,GAAK,OAC1C,CAACF,KAAO,gBAAgBC,SAAW,SAASC,GAAK,OACjD,CAACF,KAAO,YAAYC,SAAW,SAASC,GAAK,OAC7C,CAACF,KAAO,aAAaC,SAAW,SAASC,GAAK,OAC9C,CAACF,KAAO,iBAAiBC,SAAW,SAASC,GAAK,OAClD,CAACF,KAAO,YAAYC,SAAW,eAAeC,GAAK,OACnD,CAACF,KAAO,eAAeC,SAAW,eAAeC,GAAK,OACtD,CAACF,KAAO,YAAYC,SAAW,eAAeC,GAAK,OACnD,CAACF,KAAO,SAASC,SAAW,eAAeC,GAAK,QC3B/BC,cAEjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,mDACTC,UAAW,GACXf,YAAaA,EACbgB,QAAS,IAEbV,EAAKW,mBAAqBX,EAAKW,mBAAmBC,KAAxBX,OAAAY,EAAA,EAAAZ,CAAAD,IARZA,kFAWCc,GACf,MAAO,CAACC,GAAK,gBAAgBC,MAAQ,gBAAgBC,KAAO,UAAUC,MAAQ,OAAOC,SAAW,QAAQC,MAAQN,+CAGjG,IAAAO,EAAAlB,KACXmB,EAAO,GACXnB,KAAKI,MAAMb,YAAY6B,QAAQ,SAAAC,GAC3BF,EAAKG,KAAKJ,EAAKV,mBAAmBa,EAAK3B,OAE3C,IAAMY,EAAY,CACdiB,UAAY,KACZC,MAAQL,GAEZM,QAAQC,IAAI1B,KAAKI,MAAMC,QAAUsB,KAAKC,UAAUtB,IAChDN,KAAK6B,SAAS,CACVtB,QAASP,KAAKI,MAAMC,QAAUsB,KAAKC,UAAUtB,sCAMjD,OACIwB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACC,cAAc,SACrBnC,KAAKI,MAAMb,YAAY6C,IAAI,SAAAf,GACxB,OACIS,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGK,KANX,8QAM2BhB,EAAK3B,GAAK,SAAU4C,OAAO,SAASJ,MAAO,CAACK,MAAM,UAAWlB,EAAK3B,GAArF,MAA4F2B,EAAK7B,UAIjHsC,EAAAC,EAAAC,cAAA,KAAGK,KAAMrC,KAAKI,MAAMG,QAAS+B,OAAO,SAASJ,MAAO,CAACK,MAAM,UAA3D,wCA3C8BC,IAAMC,WCcrCC,MAZf,WACE,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,UAAQW,UAAU,cAChBb,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACY,EAAD,UCEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17e158b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const favoriteTGs = [\n    {\"name\":\"World-wide\",\"category\":\"International\",\"ID\":91},\n    {\"name\":\"North America\",\"category\":\"International\",\"ID\":93},\n    {\"name\":\"Australia, New Zealand\",\"category\":\"International\",\"ID\":95},\n    {\"name\":\"United Kingdom\",\"category\":\"International\",\"ID\":235},\n    {\"name\":\"Canada\",\"category\":\"International\",\"ID\":302},\n    {\"name\":\"TAC-310 USA DMRX Bridge\",\"category\":\"National\",\"ID\":310},\n    {\"name\":\"TAC-311 USA DMRX Bridge\",\"category\":\"National\",\"ID\":311},\n    {\"name\":\"TAC-312 USA DMRX Bridge\",\"category\":\"National\",\"ID\":312},\n    {\"name\":\"Alabama\",\"category\":\"Alabama\",\"ID\":3101},\n    {\"name\":\"Kansas\",\"category\":\"Alabama\",\"ID\":3120},\n    {\"name\":\"Missouri\",\"category\":\"Alabama\",\"ID\":3129},\n    {\"name\":\"Tennessee\",\"category\":\"Alabama\",\"ID\":3147},\n    {\"name\":\"Southeast\",\"category\":\"Regional\",\"ID\":3174},\n    {\"name\":\"United Kingdom\",\"category\":\"International\",\"ID\":4400},\n    {\"name\":\"Alabama Link\",\"category\":\"Alabama\",\"ID\":31010},\n    {\"name\":\"Gulf Coast DMR\",\"category\":\"Alabama\",\"ID\":31011},\n    {\"name\":\"QuadNet\",\"category\":\"Alabama\",\"ID\":31012},\n    {\"name\":\"Alert-K4NWS\",\"category\":\"Alabama\",\"ID\":31013},    \n    {\"name\":\"HSV\",\"category\":\"Alabama\",\"ID\":31014},\n    {\"name\":\"Central Alabama\",\"category\":\"Alabama\",\"ID\":31015},\n    {\"name\":\"NW Alabama\",\"category\":\"Alabama\",\"ID\":31016},\n    {\"name\":\"BayNet\",\"category\":\"Cities\",\"ID\":31075},\n    {\"name\":\"Atlanta Metro\",\"category\":\"Cities\",\"ID\":31131},\n    {\"name\":\"BYRG (KC)\",\"category\":\"Cities\",\"ID\":31201},\n    {\"name\":\"KC Skywarn\",\"category\":\"Cities\",\"ID\":31205},\n    {\"name\":\"Mid-South Chat\",\"category\":\"Cities\",\"ID\":31470},\n    {\"name\":\"The Light\",\"category\":\"Other/Topics\",\"ID\":31479},\n    {\"name\":\"PI-Star Chat\",\"category\":\"Other/Topics\",\"ID\":31672},\n    {\"name\":\"Gigaparts\",\"category\":\"Other/Topics\",\"ID\":31695},\n    {\"name\":\"Reddit\",\"category\":\"Other/Topics\",\"ID\":98003}\n];\n\nexport default favoriteTGs;","import React from 'react';\nimport favoriteTGs from './favoriteTGs';\n\nexport default class FavoriteTGStatus extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            baseurl: 'https://brandmeister.network/?page=lh&jsonquery=',\n            jsonquery: {},\n            favoriteTGs: favoriteTGs,\n            fullUrl: \"\"\n        }\n        this.buildTalkgroupRule = this.buildTalkgroupRule.bind(this);\n    }\n\n    buildTalkgroupRule(tgId){\n        return {\"id\":\"DestinationID\",\"field\":\"DestinationID\",\"type\":\"integer\",\"input\":\"text\",\"operator\":\"equal\",\"value\":tgId};\n    }\n\n    componentDidMount(){\n        let temp = [];\n        this.state.favoriteTGs.forEach(item => {\n            temp.push(this.buildTalkgroupRule(item.ID));\n        });\n        const jsonquery = {\n            \"condition\":\"OR\",\n            \"rules\":temp\n        };\n        console.log(this.state.baseurl + JSON.stringify(jsonquery));\n        this.setState({\n            fullUrl: this.state.baseurl + JSON.stringify(jsonquery)\n        });\n    }\n\n    render(){\n        const urlroot = 'https://brandmeister.network/?page=lh&jsonquery={%22condition%22%3A%22OR%22%2C%22rules%22%3A[{%22id%22%3A%22DestinationID%22%2C%22field%22%3A%22DestinationID%22%2C%22type%22%3A%22integer%22%2C%22input%22%3A%22text%22%2C%22operator%22%3A%22equal%22%2C%22value%22%3A%22';\n        return (\n            <>\n                <ul style={{listStyleType:\"none\"}}>\n                    {this.state.favoriteTGs.map(item => {\n                        return (\n                            <li><a href={urlroot + item.ID + '%22}]}'} target=\"_blank\" style={{color:'white'}}>{item.ID} - {item.name}</a></li>\n                        )\n                    })}\n                </ul>\n                <a href={this.state.fullUrl} target=\"_blank\" style={{color:'white'}}>Last Heard for All Favorites</a>\n            </>\n        );\n    };\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FavoriteTGStatus from './Components/FavoriteTGStatus';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <FavoriteTGStatus />\n        </p>        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}